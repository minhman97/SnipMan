# This workflow will build a .NET project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net

name: .NET

on:
  push:
    branches: 
      - master
      - develop
    paths-ignore:
      - 'FrontEnd/**'
  pull_request:
    branches:
      - master
      - develop
    paths-ignore:
      - 'FrontEnd/**'
  workflow_dispatch:
  
env: 
  RESOURCE_GROUP: snipman
  APP_NAME: snipman
  APP_NAME_STATING: snipman-staging
jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3

    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 7.0.x
    - name: Build
      run: dotnet build BackEnd/SnippetManagement.Api.sln --configuration Release    
      
    - name: Test
      run: dotnet test BackEnd/SnippetManagement.Api.sln --configuration Release --no-build --verbosity normal

  deploy_to_staging:
    runs-on: ubuntu-latest
    environment: Staging
    needs: build

    if: ${{ github.ref == 'refs/heads/develop' }}
    steps:
    - name: Docker login    
      uses: docker/login-action@v2.2.0
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push backend Docker images with staging version
      uses: docker/build-push-action@v4.1.0
      with:
        file: BackEnd/Dockerfile
        context: BackEnd/
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/snippet-management-api-staging:${{ github.sha }}
          ${{ secrets.DOCKER_USERNAME }}/snippet-management-api-staging:latest
        
    - name: Build and push frontend Docker images with staging version
      uses: docker/build-push-action@v4.1.0
      with:
        file: FrontEnd/snippet_management.web/Dockerfile
        context: FrontEnd/snippet_management.web/
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/snippet-management-web-staging:${{ github.sha }}
          ${{ secrets.DOCKER_USERNAME }}/snippet-management-web-staging:latest

    - name: Azure CLI login and deploy
      uses: Azure/cli@v1.0.7
      with:
        inlineScript: |
          az login --service-principal -u ${{ secrets.AZURE_APP_ID }} -p ${{ secrets.AZURE_APP_SECRET }} --tenant ${{ secrets.AZURE_TENANT_ID }}
          az webapp create --resource-group $RESOURCE_GROUP --plan ASP-snipman-b81f --name $APP_NAME_STATING --deployment-container-image-name minhman97/snippet-management-api-staging:${{ github.sha }}
    
    - name: Setup backend env
      uses: Azure/cli@v1.0.7
      with:
        inlineScript: |          
          echo '${{ secrets.SETTINGS_BACKEND }}' > settings.json
          cat settings.json
          az webapp config appsettings set --resource-group $RESOURCE_GROUP --name $APP_NAME_STATING --settings @settings.json

  deploy_to_production:
    runs-on: ubuntu-latest
    environment: Production
    needs: deploy_to_staging
        
    steps:     
    - name: Docker login    
      uses: docker/login-action@v2.2.0
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push backend Docker images
      uses: docker/build-push-action@v4.1.0
      with:
        file: BackEnd/Dockerfile
        context: BackEnd/
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/snippet-management-api:${{ github.sha }}
          ${{ secrets.DOCKER_USERNAME }}/snippet-management-api:latest
        
    - name: Build and push frontend Docker images
      uses: docker/build-push-action@v4.1.0
      with:
        file: FrontEnd/snippet_management.web/Dockerfile
        context: FrontEnd/snippet_management.web/
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/snippet-management-web:${{ github.sha }}
          ${{ secrets.DOCKER_USERNAME }}/snippet-management-web:latest
        
    - name: Azure CLI login and deploy
      uses: Azure/cli@v1.0.7
      with:
        inlineScript: |
          az login --service-principal -u ${{ secrets.AZURE_APP_ID }} -p ${{ secrets.AZURE_APP_SECRET }} --tenant ${{ secrets.AZURE_TENANT_ID }}
          az webapp create --resource-group $RESOURCE_GROUP --plan ASP-snipman-b81f --name $APP_NAME --deployment-container-image-name minhman97/snippet-management-api:${{ github.sha }}
    
    - name: Setup backend env
      uses: Azure/cli@v1.0.7
      with:
        inlineScript: |          
          echo '${{ secrets.SETTINGS_BACKEND }}' > settings.json
          cat settings.json
          az webapp config appsettings set --resource-group $RESOURCE_GROUP --name $APP_NAME --settings @settings.json    
